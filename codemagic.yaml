# Automatically generated on 2021-07-15 UTC from https://codemagic.io/app/60eec4fb6a1e97e73bd03434/settings
# Note that this configuration is not an exact match to UI settings. Review and adjust as necessary.

workflows:
  dev-workflow:
    name: Dev Workflow
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: dev
          include: true
          source: true
      tag_patterns:
        - pattern: '*'
          include: true
    scripts:
      - |
        # set up debug keystore
        rm -f ~/.android/debug.keystore
        keytool -genkeypair \
          -alias androiddebugkey \
          -keypass android \
          -keystore ~/.android/debug.keystore \
          -storepass android \
          -dname 'CN=Android Debug,O=Android,C=US' \
          -keyalg 'RSA' \
          -keysize 2048 \
          -validity 10000
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build apk --release --flavor preview -t lib/main_prev.dart --obfuscate
        --split-debug-info=build/app/outputs/symbols
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - brennercsferreira@gmail.com
  internal-testing-publishing-workflow:
    name: Internal Testing Publishing Workflow
    max_build_duration: 60
    environment:
      vars:
        FCI_KEYSTORE_PATH: /tmp/keystore.keystore
        FCI_KEYSTORE: Encrypted(Z0FBQUFBQmc4RVkwdjJXc2h4dm1uX3lRdnc3ckEwN0JzZ3VoUm5TWU1qY255UW0xOGRXT1ZxS0NRN3lCQzdTcGRCX1A2QkU1OXNUajdnZ1g0S2pLeXNGbkR5X2lkX0E4WDJkWkpBeVg1TFVjUy1PTEZQWmZRLUZ6b1l0UUFqdkdPLVZYeTB1ZnkyZjB2MkJPRHIzaklaa0J4V01iRlh3UG52dmhXYVBnR0JPSkZSV01pRU5IU1ZpT0h6UGI1WFZiUjg5MVlNZkxZUjBrVVIwR0lxSE9LTXZiMGpuV1BsQkV0c2NOWXFHUlpwSjVMQ0JtaTdPb3g4NmpWdzFtVFdpYVNOQnVzNXJCQUwtTjJINDE3MG1Ga2t3ekZWeHhuY0liNWMzRWFwbF9QdG9IQWMxQXVvelJNZzJ2NlpWN0Vrc24zUjBuM2FxbjBTZlhlb0xETFNud1czcnJBaUt6Wl80aDIxQWZELUdRWkRwUUMzSHFac2NDS05kanRhT2oySWlKRTBGOFIzZ2RscGRrdjAtcWFmUmJRejZOdjM2ejFJVW5tVEd1MGUxQm1EeHFfRkRCLW9aRFcyXzY2Ni0xN2NrQ3hTdy10WnpLeUJWZGQ1TGFPS2tFRnZ6bEREMm9Gd3dvTXlIeVJvYUVlOHBGR29FOHpoZFViTmVzMDBmb01xaFV2R2VzN1NPSVptQnB0RFNPRkhRVzJ4OWtZZ3hfS21BTDdlMmNBX1JsNlBBLXdoS245QXFlT1RrOXh2aDd1NS1qZnpjdlF4RUJyZ3laM0I0UTBzUkgxUmZWVHFndFJTUFVyelZ1TjFYX0h5VWpBM2dFQlZvT2lqTXdHTER2T2U4NVV4OXk3YWt6N0VVRl9mZVJINjdvaEtUVGh5aDRsS0E1Ri1xbmkzSjB2R0hSMHh6TUw5MTdCdnNlNXkyeUhZcEl6MFl0NVplcDRlMlJISVhET2kzWGVtRTF2ZW1YSVB0WEFPMVo2c094YThBNmk2Wm1tZTR2NjlCQjdtdUJDaEtLMjdOTklmSjZna2NqbkZtMXRVaVFrUnVJY2p4RWlTcWl6NVpjU3VyTFBqZnhJMnBVSE5MN0p4eTBLS21aMXh1NmVOam5LbHlRR1BNLWtFZG9oOGhIbkJBZldFVGlFYlBGZFlQbUM4NGEzMnNxOE5aWjlZQlFMQTNvOUQxS0VlX3Z3dkhnZTB2emR2NlBRWFpsTHlvNjIya1luR1ZDNmVfUzFpUHhXaWZHN1M0aV9TNHZpR3piUEhVdGh2ekpfY05FejRIVWtfdkR4OURHT0tMd2Ixc182d2NtbDFtOFg5SjZfcVY0bjNaRlFNV2F0ZHdSV1lkV21UeW1fcXNvQ2ZUdU1lcU9YbEl4Mnc2NHdGdTRwYW9VNW9BTzdfNGx5ekdyUFZTMDlGU2V3eURNYVRWc2FCT1Q4RzdRellYTnR5aWU1S2dGMnBCR0I2QVNWazNjLWptRHZiV3ktZWVISmdBRVJWWTZoMUt2c0ctQ3VoZ2hERVU0Z1ZnLWxOTGJQMjlMcUU3bUNoU3FnVXBkaGoySGNNSUxUVkpscE56ZHZEWnAwcjBkUU5sRXQyMi16aXhtb2I1Sk5UYTFLNm83T1VBaVlJX0pYNXpSSGh4TXJqenAxaW5KdTktTExHazJleDlYLUJzanpreXhiaHFyZ0JpRUQzWXUzVTc4NFZPMFpkVFBFLWdFR21DVmdKbGVFZDZDNzJvczAzeGxiNnAtYlpreXVXOHZlLXIwckJtOEpnLXFPZjhKTFB5RDdfWlB4WlZGQ1kwb1hOLVhSY3g2Nk5QaTlEYmhRaUtlSklOVkd4MGpVTnJjR3dMQ3dYMkpibWNkcjE3X1BpQXlNV1piWWhLOEJzQ0NnbXR4V25PNXdjS2g0YWo2MmFrNE92b2N4czJrM0htcVUtcG5LRHlWS1FSV0RRbzVmLXE1RlhUSS1YQmoxbDNlU0c4ZnVrUGxJNGVvTTRKXzhMT0h6S2tCeHlnWFFmMFd4TjFuSE15X0V1VkRCalRoTW9hRlRUNWVfNGEwVlJuSmlIWnBKd0VMYTZMcmVqZXFhVzF2bnJFS25ZN1ZNcjlQcUFtYm96ZUJfUUg1Nk9nZ0M4MTNOUUxXcGNFa1k0RlQ3STdSOXNfQTVJaUktTDZ3R0VobHFCRDhGYlhlVGRHa05RVzJDakwyeDhUSUhDQzFtTjVGTzQwU3VoSlc5emJTU19oaEVCVExmaF94TEQ0NmNoeUdfbzZFckgyR0xWampZczBScVFVRzc4OVZUUnk2eUJJM0RXU3NQZndtdXlsY0toV2dhSlF6cDFvLWhWaW1qQjZBcWxkbFIzb3VNUlgtQTFQSFFCOFFrUEkwV0gyVlJYRGhjaHFfLXVhZXRLcTF5dXVpRHgxWGhSak5BUVp3NndHeGp0VXdGQWk2a0l4S1Z0cWl2cjhKcVV1NjFIemY5a2dkUHlhVDVGUDBMSl9XQVFsSG1FWFVWQTZwRkZ2alhxSEJDU2pqaHRFUXdIR09vTG5kSjMtU0RHQTdrUnZSZXdNNWd0OGRPQS1DZ3N6c1dqS1NQcF9Hdy1fRnRqYVNybEtXQk5oNnVIejk2QWR6UWg5Y0cxTVQtaWUzbEdETjdwNmFleW1DRnFZMFYxbnJBRkVlcmZ3OGlpUFh3OU1xV1NrelhZUnVNc0t6LUt5MEFkaFJkb1dRSzRrMU5wVGlDbF85RjNmTnphLTF2RndESmthWk83VUlrbm1VQzI0V19HN3hRYi1ERmt0S1o3a2RLS2JCcG9aYkI3LXN0OXlKTEdfNnV2UlpWWk1nVWVGLXB0Z1R2WWVBMUcybnJ0VS1PVko4Qll2cF9Ic3lNNEpTMTA0aVhtRnZ4OGYyZmVFNDhXblpBQjc4Njd1Q012X2gyOUxrMFg2c0hFd0s5Qk5OMGRhb3lMQmhWOUlQN0p3bEh2LVVBNzVFdFhIQVdVSXhaTlZTZThwOG4tTmloTnhYTjJ1QUgtY3RRUzNOcFJZaHFtZ2plcWhzbTFKRlJIZ3NweUtoNjRLdTdHc2UtS0kyWllZQlVxUDNiQlVfYXdXcE5XZzFMc2YzZzYyVUNHZ2ZHOW5jSkZVeGdyWTFSTC1kRTZxeWtuVzVlVDE2bEtDX3B1M3ZVcW9LSUp6VnNlVDJ2RnFWUmRyTkVNTlE4cllKRHFwbHNHeHBaQlZTTXo5Tzk5QS13VUlOcEJJb0ZoOHFyaGpKRGFhTE11aE41WE1hLWs3SENjVlZxcHV0M1QteVViS1lxYmNKUGp5NmhzbHNHTVlmS0FNYk9ndW5vcHc0TTdpRUlGd1lJMXUyU0lzdlJqZEpFX1U5SU1FdEJkZEJsVVczT2Fib1hSZVNyV0NnRDZaMlJybDgwVmZJVHBOVlo3akViTEhOR1BCMEJlMzJLVHAzRWYtQWNSbG0zQkIwWU9kckQ0V3FpVXp1ZFlDUHdYQVIzT2ljOGpSTFJTMnpTTzFmeGZBakdSS1BzdHpuQWg0ZTg0cGFudEFmRThMUzNuRzJaMi1ZYzBiNDE2NFBJaktTWDhIX0M1YkpTUXdLYW52MlJsckdlWHVlVXNXWVRETU42VzdpUkRxSnloc0FqWnRNb2loUG5GdVZySjRfM3BUbmV5NU50Z2RrVWNFMkptWUs1aldRZTFhcTZMa3pibXB0MFpLY0N4LVRzSHpZZDRnVmlab2h6MGM3YlhLMFBpQnR5SU9lZk52ekRFOUZ4d1BKYXExZ096LVY2eC1NTU1XU1lNTGRFVC03UEMzbkM5Z25HZTVuRmVfTEpfMTdiUWtBTktOM3Zid2YwTVBPbWhYRlZjTEVCMnhQYUJONkx2TUVodk9IUThYMWRQbEkyWFBDRlhPWkZBSEZUcnowWkc5MWtZWXIwR0tfMnlUd2pBLVprNjRrZ3lncWkyYlZJNktZa2huLXdEa2FJMk9acER1cVhHOGx1STFIT2tQYzhaMmYxMXp4cExsRWJkem8ybWVGOVZxd1B4MXgyVzhQeVpZVmV1a0UyME1NRHNPT05Ja0V3cVFEdDNzV1I2YWZsVDJaMTJkSjJ6THFhT3A4ZmNrY2s2TUctQlJBTTJURjZMNHYzRkR3NGtJdVdKeVJlWnotMDhFNU41SGNpZW13Q3dfRUYwMm82QklfbGRVTFF0ajFhMWpSRGFBTjdFMUNkNXh4R0czOUdZSkJuYWxEaFhieEtOTm5OR0xwWWFtYjV2WUp3b21iTm5tNzdrc3BiV1gzS0Y3UkFEbWg2anpnYjFJNnc0NjNkRHBacHhpRVIxTTlxZFNQbmx1R1JqTnMyeThGV3hoRWd2MXpWRloyM1JvU25uWk5SdFlsbDJ0bHJXV3BaWk94TGw0V1E1am53d3dPQ3NWdDd1aDVGSHltQXJyNVRyc2FlYzZyVG1lSW5OUml2dEhrV0pJRmNycGZzX1JhYWlpVWFSenY2NWwzUUw5cmNqVlF5ZVJpMFBSVmJOeGN0TEtEbkQ5ZlhGLWczX0dLYmRuNzliWWFYMGUwdFVvMDhCS2JaUTlTLVRvbDZ1b244bmNKX2VoRlh6U0laekFQekdHVExLV25kLWtGNktXMTlmdVdON01PMWZOX09aSEFHVC1HQmY5YUVZb0hNR1V6SllnQnVJOFg5LXZRQkNHSnNLZDR5YVBDTExIMUNRbjNRZUFjZGhXQzdGTzEzdzU3MnlweW82a05wdGtWeDYtS3RIWDJDRnEzUlFtdDFaQWU3TFdQdG5WWktPM2kwRzVZbjlUMTRNTjA4NExJLTJrTXZ1M2N6SmVJZ09qNXFWY2FqWHVpNzNBMTVZN0lQalBYRHloUTU4ajdJaTA2WEo4X09uYzB3NktKMTNqUldRbjFzSldWWTFXLUl0amhEaVJMVk9yY25SYWZ3OHF2RER1UnZoTEhZWWZOaFgzYnE1UkJaNUc3TEhrbEw4WHpPNUhKbllPV0xlaS01dFZQN3E1MzhNSXY3dFpmbzhYTWhYWDYtZzFfYzZjbWRzdVNhMVVPOTEzMGQwNzNpUGU4c1VqTUFDLTl1RXFLU1pBQnRER1VLZ2tCZmhtQ2s0Zm5XZFpVVV9nOVV1MFU0Z0pKZnE0ZWhPSXo4X1ozejZoWnNNRUIwWk5yOERpcURJVTA1dU02VHVKNm1ZcnI0eEk1VkZpd2ZUZk82bWNVRGxDZEJ6ZGdfanUyMkUydjIxRWpFYmdiLXNjNHhJMjBXNHRpSGFwaFVDSmktSE83NTVxdnQzRDQ0RWV0Z0NZVThpZkJYekYxSGV1TGZ6TjJOSjdoWGNod3B0Q2hDOFBTc1pTRGVPd1VnUzhKV1d6M3NlRUFFNzk1Mzh4dDlCUFU2MEF4YXg4cDlDV2ZFVjRwWkNiaGlhRjVkU1ZjTnVTaXNKWkphVkcxc25yTF9POGlHZzNCUVFKbno3blkyVExKVlVrTFZLR2ZhbXVpLTdaU3JCNVo4cFBpc3JkVjcyaTVlVFJxb1dFV0ZkNDdMZG9YSlA0R19uM3MzaVRzVzRnNmxmdXhHMWxtZ2F3ZnladVlnU2lYX294MkR4eTNFQUJ1c2VMSzJTMmhXcGNrMFVFQzZJYm9QMXlaZzRNSGtCR2wtdVB0TldlUkVrSjZGTk8yY2h2MVl6QjRfMGVQMnlWMU51TE5qWXFnYklQNmdWWE9aMmxrZUNURzBjbFR2cFBBWkhPWDh4LWxmb0Y4RkhnUHg3MlVRbjZOSHFfbC1qeDVYZ0VHOVJObm15MGwxOWs2NFZnN1F5TXRELWpWVEVkc3BUTXpmeWlKUkkwQ21iTExwQ1l5X1RhbEtRaHBScEVCX3d5QkFaR0p3RUhZZHpxdmJmekRtclJ6RDdzWXM1MW45Rk5xLWxBcWUzdTdSYm1rQlkxU1AxX1JsWUt3TVlpdGVWOWR5bHM1SjQ1ai1WREhMeFZGSzJyNEljUnlRbGh4eHlFbW1ybXV1TmxWTDJUY29OVHNyVzJzUTRLOTZ2ampqZnRXMlIyalFFNnJybjRtREdXOW5UZm9rbUstdFlHeDdTaklsU3lfTkNLOXlPM0lmMzNiVTVva29SYmQzNFZnYzAwYm5WbVZIZXdVMHJqSDhWZHhqMFBZRGR6Z0ZENi1kM3VjRWhWY3JHY0oweTR3eVR4WlNwRWkxOTB4WTJkQ25vaWJ1dVBtam5HbnEtOVpOSUo2dXJEN1NwTzVGallIcGttZ2szcm5maHhWd3dRZ2NiOGlTTkNvTERaQmhPVnF3T2NBaDVUdlJNNXRHZk5lUHRiYXJLV3VyYURfOElhTXlmMWsyaTFvMVhyOVZ2eTBCQVZMbFd1cUJXbVFMa3djOXA5YnFhRWFSMmpZTE50amo2Wm1YTU9vQVI2b0drYm1qck41d2tjPQ==)
        FCI_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmc4RVkwdUlwbWE2M05jV1pQbEVsVHkxcHBQOHpVaDJ2WWJPNXZCUUktT2pzT2hPT01OdTQyNnJUVERiYmR1d05ZYjAydEltRzNYTmdZdm1tM0hBQmhXblhrLVE9PQ==)
        FCI_KEY_PASSWORD: Encrypted(Z0FBQUFBQmc4RVkwN3d4TXNxVFd0d0paSVNTeDY3dUhzVjExa3U2X3dEQlRMNHVqamp1MXcyMnZCZ3JWcmxyd3ZRWE1mU3Vla3IxMnpqSDhnRWJjYjEyT2l6UUgzRmpNSUE9PQ==)
        FCI_KEY_ALIAS: Encrypted(Z0FBQUFBQmc4RVkwN1YzNENYZG5QMEx3NEFDQnpDX09BZzM1U0xDZ2JmUVBWeXlDSmhVcm5DdmNsdTJyUlc0RGZvaWxuakV1VjhwWGo0ckZNazlZdERVU1RQRDlxZzgyLXc9PQ==)
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: preview
          include: true
          source: true
      tag_patterns:
        - pattern: '*'
          include: true
    scripts:
      - |
        # set up key.properties
        echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
        cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
        storePassword=$FCI_KEYSTORE_PASSWORD
        keyPassword=$FCI_KEY_PASSWORD
        keyAlias=$FCI_KEY_ALIAS
        storeFile=/tmp/keystore.keystore
        EOF
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build appbundle --release --flavor prod -t lib/main.dart --obfuscate
        --split-debug-info=build/app/outputs/symbols --build-name=1.0.$BUILD_NUMBER
        --build-number=$(($BUILD_NUMBER + 100))
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - brennercsferreira@gmail.com
      google_play:
        credentials: Encrypted(Z0FBQUFBQmc4RVkwQVFFNm92b3NfcTgzYUItMmh3TVhXbm1ObXl4S3N1UWVfcmNhWGxmRFB5OHFCLTRBRG1NZkVBanRBRU5veVR0ekhvQXY3WHJxNkJZV3VuZkRONFZjdXFrVEppYl80QWdYcjVKZE9YZE4zX2dSNW95YUMtcW9pZGd5UGh1cWtXeEtNaU1KZjlzdm9rS1Zzd185dmV5RDczbUtUNnpVVld2SUFzTkZWSXk0OUtiYUgxN2puQjhXa29sVkhGcDlXeUdoaWZnRDBYbTJIX0VxbDMzSHNyS3RiTktwbU1oRzU5dFdyVERtNnk4UFpfczFvODZJOEVzV0NhT29SWnVPaUMyaGdlS0luelI5RGpqYnoxczh0Qks1WjFBdmpub3hrSTRLZUo5czlBbG1uUXdVU0lESlNFT3BjeXBfZzd5NVJIcWxDWTJlS2VVc2xuZlZCREZubXhKdVNNTGVPelNlT2RqejB4MVd6bEM4aXh5QWhOdDBkT19HdEhKWkNMWF9vOHJqZS1tSXFGYnAtVEZQcVRKQWlBRkk2T3dvZUVXSjBPby1YdGduQVhpcVJGU2ZKS3lMVkxlVnA4anM2cDQ4QTNLYmRFY0VrZnJvXzVVZzhlZlQtT1lnTVVRY3lPS21SdDM5TnNYc3BmTUVHRy01VE9nSHAzSkl6b2s0cEhnWDFtd3VCSUYzU0lrSTJVSmlHdW5MdEhPWFIwVV8zZnB1VmdqaVJ4WkxVYzQ0aE1YRi1wWmoxSG1mRURZbFhSS2VHTXlIOW1hQ2NaTUJjNFRuZ25PektkM2ZwSVZQQjVKWU0xRDZ5QnZKNU5sajMtTUh2Zl9tTGVsR1o1ODI2OHo3VDVZZ3lmQVV2eVhubUowUE1SRC1lU1BVQkZDODdNajJKcXZXck44ZUQzVlR4UHh3YVdpSXJtX2Zfa1o3MExBUlN3QWc1UV9RaVZoTjAxS3hwUlhnWWwycVpXWkRXM0duemlLQURISGE1NmVKMnJiREdVVlZBQVNYOVlRUGVvLWhFZzkzRnR2aUV1aTBuNjV0SmVVUTNRUExrM1JGUUF2X250QXQ1My1ydzRqTTRWbkF3UkIyeHRBMkVrc0tJU0lBbVFBbkpBQVVENzBmWUFNSGhCdnZLUjVPNjFxVnZ4VUc0bnBkM01oZ1phU25IdXNOVTZhU0hMaDg2czdNdzVJSEtBa045M0w4NEF6a01ncFZHSWtQM1l4dE04RUcyTU0wdDJQMUdBR2NieFFJck9mQVJHdEVoVlJGeTk0T3kwV2xZT21uVmxDOUNRcGhZLV91UEgwLWhkNi04SUc1bmI3bzBwTjA2ai0yVTNlQXMtQ0hCM0lpSFJWblgxaHl1V2M0b3pqek1XS2xVODk5ZW9STFltbzE4a0xXbmtOWUotdjJla2o0b1hTOU5waHRFN0c3eDlYOWxfSi1ZbEs2bklRS0pSRGdfY2NzalFCQjZMM2k4NEtKZGs3a01CZWxaWndsa3pNekcxT2t1UWx5VFQ4SUNnTndzVkV1QmhWaVRZVkdqVmpWcGVfbXJzM29Nb0JKcF9xdWJCVXM2Wnd6UFE2UWxXWlZBenlIU1JkdDlrX20zb0E3WEg3WV9yNGlLYTAzWkJzcXBoS1pVX2hSSzBYRDBsR0VjQ1VEdjc1OFF0YjFQMkQ4Rmota0JhMndPWlhoUENyTi1iOGE0VHM0OGtxNmNMQUZKUXMzRmRlWWVaY2szaHYtNE93WlRzb2JwRm1vTWVZUVVoWGhZRXQ3Z3FNS1k0a3lYYlM2UWE2cV9lMl9zZjczS0ZUWnM2WFB0T0plc28xalFsTk9FbHl3VmVydnhpdTRxTzY0TkZQWkxGMGk2NWpjZG9FbkZReEktMUxmQzlrTWp2ejhYbHBFRmZ3OXVyQWd5TmFwellwOHUzYVowVFE0V3lDeENLOHZRNnFwSDVOc0I1cklncGw3MllxYmF4MHJUMHFsaEh6RHdrVE1raDFsdVFTTUlSb2dsYTlmTElCaGEzdVhVYll4NkxPN2tjU2k4N1FmWkRYc1dGNEFCYVRfS3dLbGd5VGYxSEpFZU1CRWV3eVZMNzdoSmZWdkozeDcxQXhqWDZQR01nbGRkZEg5b3lYcnd5NmZxSlg1V0JhN3FrbHBhci1BbDhBRndGN1poOTJOaHZzSXlwSkFCM2RIaEw3dkVvc3Y1VER3Tno5ZlA5NU5sUF9pS0sxVWhuWDN2azVHRnJ0d0V3aUhhUjZHbktqaHozOWpXbjg0dTJ5TFpObzRySF9VWmNIVnF0dC1uWGlxSUItbnM3UzJZdGgzRVFsejVjSjNEa0dtcWhLY3FWMkJMN3BBNm1OYUF5a1JSSUpNR3ZIY190V3FCc1NiSjlueVN2VFpiTWpRQkwxd2NweVh1QjBGeWM1RkRfZlg0a3NWRVRLcWNfc04zMmVOeEdDZUtyVUxLTkEzTjZXWVBlLUF4TWVMN05PRm9qWmlNekdVdHpYYXJQVEFBX3gyaGNldjNBODZXTS1ldTVqbXN5aVpXY1VERm1YTDVUOGZmSnRzUDZwTkR4LV9JSElNV0R1bFZibDJOQ2ZidFkwcUwwekdELWNRWmU1WkM2a19lbUxxZjVuQmxHY2YyX3JrUlJmQ0huR3NzczB1bDNmc3dRX182ektrYmk3R3RJcGVqTVB3T2h0U0tvd0p3OFNVX1dzVnRhbTZoZ0tVdzJhWms4Y0JyYVdjVkRGcFhLckJyMm1sc3c5M3dCLXRsS3Z2WDQ4VzlEeFpPRHNGSXlEUEJ1aUxqdzZUOTc4cWRjQnNLQ1huWmlJNmhMczlPOGxJTVlDNDhKZ2V6UG1SX1lod1czeHNsZ1p5Z1lSVDZMbHloRHRaRXNzdWo3cVkweVJZeGJfZlphekx2dDZmbjRhMWUxMGR4U3AxZ0drZ19wTEVIaHVZdU9XZ1YyZGU5a1hVcmo4dWVWWHBUaDlPTVNfYjNBY2tvMHBva3ZmeDUtQ19lOWd5TUtkcEh3Z1FNMEctaGdsN05lXzRaallUTDlKamVFTUdPSmZla082cEdNd1FHSVhEeURMYlVNaFpEc0tqRVJtVUt4T1ZTX0dnUDFodGNjaGpPOHE5WlEzWlhxazBFYzNHektxWnNkMXp5VFdHWEdCcU5aYzdRRTlLd09nWWxUOVhrWGh6dVBBRGhaTU1EeWtSQTZ6UGtVa1hlVERCTmxOR3Z1MmdGS2NQWmNkSmNfWlJQbjRnVGtrbEZ6UDVkdzFKNmZYU3V4cFV5NFVhTFV0QTByNndzOGlKUDYtNWVoRkxnMmxBYUlIaTk5UE5LaFgwSzRBTWk0aVpZbWtnU0pnY0k2RU45c0N4WFZ5MmZSdFNscjJDTGt6Y1pYWXhKQldqeVlWQ1E3eTN3ckNvV2hUUUZEMDZvSkxvOUxKOHBUNXdsN1haUGJnOU9WR0VmZG9FbEh2cGFFdUQtQmk0OGNta09Sc3ZMUEJOZThtVGVWMVp1bVZad0YxdGxPbFRwaTdaUmttX0ZJZkJuemFWbTM2ZFcxYnlWTEZqV1ItVWg4T2k3WTlWT3BQMVBMeVlZLUZpLXE4bWxzVnpVb1EyTVFMVXA0MWFndTZYYzBrOE9MTjNQU1BhZl9ZcGhDVXlIa25iZDlnVkN4OXhEUTc2VS1pT2pIUWlKRmp3eFFDSVIzOVFheHNrQ1ZKS05CWXJHWEtGcWVzSHdWWGwxVGQ0NFB3MjRJdlg1Y0stYlV2U3Y2S21BTkZfZjJuNTVSRFl5Qk1OMHhOTU1kSFQ3QjlweUJFSVJfaXNadXBSZ05WNXRDVlBxRkgxR3RhOVgtVWN6ZkZhMm9nOEkteURPQmFLbzh0YWhZOEpaaTVkZll6Z3BIZjZSRG1ZWnR5cTBEV3pfWWItS1JSTkVoNjRvZXlPcXdrejZEa2JQbHlMSXRqdFRURWp3VGV5VlFmbUFUVzE3aXVVQ1UxR3lwSG1vcjNGd0dMN3Zkalk2OHJGQzNwZ2IyMC1nbW5hWU1CNHlja0s1R1JCZk9vWWVMVFdrMjJCNlBNYzhMZHg1N1p6VW92OEYyU1pXRUp0b2llZk42SXllZU9odWlrMTI0YlNfSFR6UzJnVDlzTUNmU2RZNGJQaU44dUp2b185cHl0OXBrdl9NSmxoVE41RXpCd044elBGUVMzd2V2dDdIYXhxYnhlQkQtTVF1V1dfcjlCZWEtUDhId2d6aURPSjdxbG1lTVVhdUpmaEpUMnk4RUdNUG9fNTZuMHRQc3RfdmZ2NFlXVUl1UzJfTExyTkJFUmp3dGIzakhrUjBCcFFRRGNtUXBwSGU0bWNiNDNIeWY4PQ==)
        track: alpha
        in_app_update_priority: 0
